// Generated by view binder compiler. Do not edit!
package com.example.qualitytestforandroid.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.DatePicker;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.qualitytestforandroid.R;
import com.google.android.material.button.MaterialButton;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityExportRecordsBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final MaterialButton backButton;

  @NonNull
  public final TextView endDateLabel;

  @NonNull
  public final DatePicker endDatePicker;

  @NonNull
  public final MaterialButton exportButton;

  @NonNull
  public final TextView startDateLabel;

  @NonNull
  public final DatePicker startDatePicker;

  @NonNull
  public final TextView titleText;

  private ActivityExportRecordsBinding(@NonNull ConstraintLayout rootView,
      @NonNull MaterialButton backButton, @NonNull TextView endDateLabel,
      @NonNull DatePicker endDatePicker, @NonNull MaterialButton exportButton,
      @NonNull TextView startDateLabel, @NonNull DatePicker startDatePicker,
      @NonNull TextView titleText) {
    this.rootView = rootView;
    this.backButton = backButton;
    this.endDateLabel = endDateLabel;
    this.endDatePicker = endDatePicker;
    this.exportButton = exportButton;
    this.startDateLabel = startDateLabel;
    this.startDatePicker = startDatePicker;
    this.titleText = titleText;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityExportRecordsBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityExportRecordsBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_export_records, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityExportRecordsBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.backButton;
      MaterialButton backButton = ViewBindings.findChildViewById(rootView, id);
      if (backButton == null) {
        break missingId;
      }

      id = R.id.endDateLabel;
      TextView endDateLabel = ViewBindings.findChildViewById(rootView, id);
      if (endDateLabel == null) {
        break missingId;
      }

      id = R.id.endDatePicker;
      DatePicker endDatePicker = ViewBindings.findChildViewById(rootView, id);
      if (endDatePicker == null) {
        break missingId;
      }

      id = R.id.exportButton;
      MaterialButton exportButton = ViewBindings.findChildViewById(rootView, id);
      if (exportButton == null) {
        break missingId;
      }

      id = R.id.startDateLabel;
      TextView startDateLabel = ViewBindings.findChildViewById(rootView, id);
      if (startDateLabel == null) {
        break missingId;
      }

      id = R.id.startDatePicker;
      DatePicker startDatePicker = ViewBindings.findChildViewById(rootView, id);
      if (startDatePicker == null) {
        break missingId;
      }

      id = R.id.titleText;
      TextView titleText = ViewBindings.findChildViewById(rootView, id);
      if (titleText == null) {
        break missingId;
      }

      return new ActivityExportRecordsBinding((ConstraintLayout) rootView, backButton, endDateLabel,
          endDatePicker, exportButton, startDateLabel, startDatePicker, titleText);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
