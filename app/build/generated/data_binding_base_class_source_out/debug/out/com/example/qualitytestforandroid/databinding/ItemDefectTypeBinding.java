// Generated by view binder compiler. Do not edit!
package com.example.qualitytestforandroid.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import com.example.qualitytestforandroid.R;
import com.google.android.material.button.MaterialButton;
import com.google.android.material.card.MaterialCardView;
import com.google.android.material.textfield.TextInputEditText;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ItemDefectTypeBinding implements ViewBinding {
  @NonNull
  private final MaterialCardView rootView;

  @NonNull
  public final MaterialButton cancelButton;

  @NonNull
  public final TextInputEditText defectNameInput;

  @NonNull
  public final MaterialButton editButton;

  @NonNull
  public final MaterialButton photoButton;

  @NonNull
  public final MaterialButton saveButton;

  private ItemDefectTypeBinding(@NonNull MaterialCardView rootView,
      @NonNull MaterialButton cancelButton, @NonNull TextInputEditText defectNameInput,
      @NonNull MaterialButton editButton, @NonNull MaterialButton photoButton,
      @NonNull MaterialButton saveButton) {
    this.rootView = rootView;
    this.cancelButton = cancelButton;
    this.defectNameInput = defectNameInput;
    this.editButton = editButton;
    this.photoButton = photoButton;
    this.saveButton = saveButton;
  }

  @Override
  @NonNull
  public MaterialCardView getRoot() {
    return rootView;
  }

  @NonNull
  public static ItemDefectTypeBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ItemDefectTypeBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.item_defect_type, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ItemDefectTypeBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.cancelButton;
      MaterialButton cancelButton = rootView.findViewById(id);
      if (cancelButton == null) {
        break missingId;
      }

      id = R.id.defectNameInput;
      TextInputEditText defectNameInput = rootView.findViewById(id);
      if (defectNameInput == null) {
        break missingId;
      }

      id = R.id.editButton;
      MaterialButton editButton = rootView.findViewById(id);
      if (editButton == null) {
        break missingId;
      }

      id = R.id.photoButton;
      MaterialButton photoButton = rootView.findViewById(id);
      if (photoButton == null) {
        break missingId;
      }

      id = R.id.saveButton;
      MaterialButton saveButton = rootView.findViewById(id);
      if (saveButton == null) {
        break missingId;
      }

      return new ItemDefectTypeBinding((MaterialCardView) rootView, cancelButton, defectNameInput,
          editButton, photoButton, saveButton);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
